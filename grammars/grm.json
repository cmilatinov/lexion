{
    "definitions": "",
    "rules": [
        {
            "left": "Grammar",
            "right": [
                "ProductionList"
            ],
            "reduction": {
                "ty": "Vec<Rule>",
                "code": "$$ = $1;"
            }
        },
        {
            "left": "ProductionList",
            "right": [
                "ProductionList",
                "Production"
            ],
            "reduction": {
                "ty": "Vec<Rule>",
                "code": "$1.extend($2); $$ = $1;"
            }
        },
        {
            "left": "ProductionList",
            "right": [
                "Production"
            ],
            "reduction": {
                "ty": "Vec<Rule>",
                "code": "$$ = $1;"
            }
        },
        {
            "left": "Production",
            "right": [
                "NonTerminalProduction"
            ],
            "reduction": {
                "ty": "Vec<Rule>",
                "code": "$$ = $1;"
            }
        },
        {
            "left": "Production",
            "right": [
                "TerminalProduction"
            ],
            "reduction": {
                "ty": "Vec<Rule>",
                "code": "$$ = $1;"
            }
        },
        {
            "left": "NonTerminalProduction",
            "right": [
                "NonTerminal",
                "'->'",
                "RuleList",
                "OptReductionAction",
                "';'"
            ],
            "reduction": {
                "ty": "Vec<Rule>",
                "code": "$$ = $3.into_iter().map(|r| Rule { left: $1.clone(), right: r, reduction: $4.clone() }).collect();"
            }
        },
        {
            "left": "TerminalProduction",
            "right": [
                "Terminal",
                "'->'",
                "Regex",
                "';'"
            ],
            "reduction": {
                "ty": "Vec<Rule>",
                "code": "$$ = vec![Rule { left: $1, right: vec![$3], reduction: None }];"
            }
        },
        {
            "left": "RuleList",
            "right": [
                "RuleList",
                "'|'",
                "SymbolList"
            ],
            "reduction": {
                "ty": "Vec<Vec<String>>",
                "code": "$1.push($3); $$ = $1;"
            }
        },
        {
            "left": "RuleList",
            "right": [
                "SymbolList"
            ],
            "reduction": {
                "ty": "Vec<Vec<String>>",
                "code": "$$ = vec![$1];"
            }
        },
        {
            "left": "SymbolList",
            "right": [
                "SymbolList",
                "Symbol"
            ],
            "reduction": {
                "ty": "Vec<String>",
                "code": "$1.push($2); $$ = $1;"
            }
        },
        {
            "left": "SymbolList",
            "right": [
                "ε"
            ],
            "reduction": {
                "ty": "Vec<String>",
                "code": "$$ = vec![];"
            }
        },
        {
            "left": "NonTerminal",
            "right": [
                "'non_terminal_literal'"
            ],
            "reduction": {
                "ty": "String",
                "code": "$$ = $1.value.clone();"
            }
        },
        {
            "left": "Terminal",
            "right": [
                "'terminal_literal'"
            ],
            "reduction": {
                "ty": "String",
                "code": "$$ = $1.value.clone();"
            }
        },
        {
            "left": "Symbol",
            "right": [
                "'non_terminal_literal'"
            ],
            "reduction": {
                "ty": "String",
                "code": "$$ = $1.value.clone();"
            }
        },
        {
            "left": "Symbol",
            "right": [
                "'terminal_literal'"
            ],
            "reduction": {
                "ty": "String",
                "code": "$$ = $1.value.clone();"
            }
        },
        {
            "left": "Regex",
            "right": [
                "'regex_literal'"
            ],
            "reduction": {
                "ty": "String",
                "code": "$$ = String::from(&$1.value[1..$1.value.len()-1]);"
            }
        },
        {
            "left": "OptReductionAction",
            "right": [
                "OptReductionType", "'action_literal'"
            ],
            "reduction": {
                "ty": "Option<Reduction>",
                "code": "$$ = Some(Reduction { ty: $1, code: String::from((&$2.value[2..$2.value.len()-2]).trim()) });"
            }
        },
        {
            "left": "OptReductionAction",
            "right": [
                "ε"
            ],
            "reduction": {
                "ty": "Option<Reduction>",
                "code": "$$ = None;"
            }
        },
        {
            "left": "OptReductionType",
            "right": [
                "'type_literal'"
            ],
            "reduction": {
                "ty": "String",
                "code": "$$ = String::from((&$1.value[1..$1.value.len()-1]).trim());"
            }
        },
        {
            "left": "OptReductionType",
            "right": [
                "ε"
            ],
            "reduction": {
                "ty": "String",
                "code": "$$ = String::from(\"\");"
            }
        },
        {
            "left": "'type_literal'",
            "right": [
                "\\[[\\s\\S]*?\\]"
            ]
        },
        {
            "left": "'action_literal'",
            "right": [
                "\\{\\{[\\s\\S]*?\\}\\}"
            ]
        },
        {
            "left": "'non_terminal_literal'",
            "right": [
                "(?:[a-zA-Z0-9]+|ε)"
            ]
        },
        {
            "left": "'terminal_literal'",
            "right": [
                "'[^']*'"
            ]
        },
        {
            "left": "'regex_literal'",
            "right": [
                "\\/.+\\/"
            ]
        }
    ]
}

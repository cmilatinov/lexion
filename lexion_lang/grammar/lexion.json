{
  "definitions": "",
  "rules": [
    {
      "left": "Program",
      "right": [
        "StmtList"
      ],
      "reduction": {
        "ty": "Vec<SourcedStmt>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "StmtList",
      "right": [
        "StmtList",
        "Stmt"
      ],
      "reduction": {
        "ty": "Vec<SourcedStmt>",
        "code": "$1.push($2); $$ = $1;"
      }
    },
    {
      "left": "StmtList",
      "right": [
        "Îµ"
      ],
      "reduction": {
        "ty": "Vec<SourcedStmt>",
        "code": "$$ = vec![];"
      }
    },
    {
      "left": "Stmt",
      "right": [
        "ReturnStmt"
      ],
      "reduction": {
        "ty": "SourcedStmt",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "Stmt",
      "right": [
        "ExprStmt"
      ],
      "reduction": {
        "ty": "SourcedStmt",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "Stmt",
      "right": [
        "VarDeclStmt"
      ],
      "reduction": {
        "ty": "SourcedStmt",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "Stmt",
      "right": [
        "FuncDeclStmt"
      ],
      "reduction": {
        "ty": "SourcedStmt",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "Stmt",
      "right": [
        "BlockStmt"
      ],
      "reduction": {
        "ty": "SourcedStmt",
        "code": "$$ = (\r\n        $1.span,\r\n        Stmt::BlockStmt($1.value)\r\n    ).into();"
      }
    },
    {
      "left": "ReturnStmt",
      "right": [
        "'return'",
        "Expr",
        "';'"
      ],
      "reduction": {
        "ty": "SourcedStmt",
        "code": "$$ = (\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Stmt::ReturnStmt(ReturnStmt {\r\n            expr: Some($2)\r\n        })\r\n    ).into();"
      }
    },
    {
      "left": "ReturnStmt",
      "right": [
        "'return'",
        "';'"
      ],
      "reduction": {
        "ty": "SourcedStmt",
        "code": "$$ = (\r\n        SpanBuilder::merge($1.span, $2.span),\r\n        Stmt::ReturnStmt(ReturnStmt {\r\n            expr: None\r\n        })\r\n    ).into();"
      }
    },
    {
      "left": "ExprStmt",
      "right": [
        "';'"
      ],
      "reduction": {
        "ty": "SourcedStmt",
        "code": "$$ = (\r\n        $1.span,\r\n        Stmt::ExprStmt(ExprStmt {\r\n            expr: Box::new(($1.span, Expr::NoneExpr).into())\r\n        })\r\n    ).into();"
      }
    },
    {
      "left": "ExprStmt",
      "right": [
        "Expr",
        "';'"
      ],
      "reduction": {
        "ty": "SourcedStmt",
        "code": "$$ = (\r\n        $1.span,\r\n        Stmt::ExprStmt(ExprStmt {\r\n            expr: $1\r\n        })\r\n    ).into();"
      }
    },
    {
      "left": "Expr",
      "right": [
        "Expr",
        "','",
        "AssignExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "Expr",
      "right": [
        "AssignExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "AssignExpr",
      "right": [
        "UnaryExpr",
        "'='",
        "AssignExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "AssignExpr",
      "right": [
        "CondExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "CondExpr",
      "right": [
        "LogicOrExpr",
        "'?'",
        "Expr",
        "':'",
        "CondExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $5.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: String::from(\"?:\"),\r\n            args: vec![*$1, *$3, *$5]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "CondExpr",
      "right": [
        "LogicOrExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "LogicOrExpr",
      "right": [
        "LogicOrExpr",
        "'||'",
        "LogicAndExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "LogicOrExpr",
      "right": [
        "LogicAndExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "LogicAndExpr",
      "right": [
        "LogicAndExpr",
        "'&&'",
        "BitwiseOrExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "LogicAndExpr",
      "right": [
        "BitwiseOrExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "BitwiseOrExpr",
      "right": [
        "BitwiseOrExpr",
        "'|'",
        "BitwiseXorExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "BitwiseOrExpr",
      "right": [
        "BitwiseXorExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "BitwiseXorExpr",
      "right": [
        "BitwiseXorExpr",
        "'^'",
        "BitwiseAndExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "BitwiseXorExpr",
      "right": [
        "BitwiseAndExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "BitwiseAndExpr",
      "right": [
        "BitwiseAndExpr",
        "'&'",
        "EqExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "BitwiseAndExpr",
      "right": [
        "EqExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "EqExpr",
      "right": [
        "EqExpr",
        "'eq_op'",
        "RelExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "EqExpr",
      "right": [
        "RelExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "RelExpr",
      "right": [
        "RelExpr",
        "'rel_op'",
        "ShiftExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "RelExpr",
      "right": [
        "ShiftExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "ShiftExpr",
      "right": [
        "ShiftExpr",
        "'shift_op'",
        "AddExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "ShiftExpr",
      "right": [
        "AddExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "AddExpr",
      "right": [
        "AddExpr",
        "'+'",
        "MulExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "AddExpr",
      "right": [
        "AddExpr",
        "'-'",
        "MulExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "AddExpr",
      "right": [
        "MulExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "MulExpr",
      "right": [
        "MulExpr",
        "'*'",
        "CastExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "MulExpr",
      "right": [
        "MulExpr",
        "'/'",
        "CastExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "MulExpr",
      "right": [
        "MulExpr",
        "'%'",
        "CastExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![*$1, *$3]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "MulExpr",
      "right": [
        "CastExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "CastExpr",
      "right": [
        "'('",
        "Type",
        "')'",
        "CastExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $4.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: String::from(\"()\"),\r\n            args: vec![*$4]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "CastExpr",
      "right": [
        "UnaryExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "UnaryExpr",
      "right": [
        "'++'",
        "UnaryExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $2.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $1.value,\r\n            args: vec![*$2]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "UnaryExpr",
      "right": [
        "'--'",
        "UnaryExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $2.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $1.value,\r\n            args: vec![*$2]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "UnaryExpr",
      "right": [
        "'sizeof'",
        "UnaryExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $2.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $1.value,\r\n            args: vec![*$2]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "UnaryExpr",
      "right": [
        "'!'",
        "CastExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $2.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $1.value,\r\n            args: vec![*$2]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "UnaryExpr",
      "right": [
        "'~'",
        "CastExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $2.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $1.value,\r\n            args: vec![*$2]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "UnaryExpr",
      "right": [
        "'&'",
        "CastExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $2.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $1.value,\r\n            args: vec![*$2]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "UnaryExpr",
      "right": [
        "'*'",
        "CastExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $2.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $1.value,\r\n            args: vec![*$2]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "UnaryExpr",
      "right": [
        "'+'",
        "CastExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $2.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $1.value,\r\n            args: vec![*$2]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "UnaryExpr",
      "right": [
        "'-'",
        "CastExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $2.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $1.value,\r\n            args: vec![*$2]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "UnaryExpr",
      "right": [
        "PostfixExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "PostfixExpr",
      "right": [
        "PostfixExpr",
        "'['",
        "Expr",
        "']'"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $4.span),\r\n        Expr::IndexExpr(IndexExpr {\r\n            expr: $1,\r\n            index: $3\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "PostfixExpr",
      "right": [
        "PostfixExpr",
        "'('",
        "')'"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::CallExpr(CallExpr {\r\n            expr: $1,\r\n            args: vec![]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "PostfixExpr",
      "right": [
        "PostfixExpr",
        "'('",
        "ArgList",
        "')'"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $4.span),\r\n        Expr::CallExpr(CallExpr {\r\n            expr: $1,\r\n            args: $3\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "PostfixExpr",
      "right": [
        "PostfixExpr",
        "'.'",
        "'ident'"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Expr::MemberExpr(MemberExpr {\r\n            expr: $1,\r\n            ident: $3.value\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "PostfixExpr",
      "right": [
        "PostfixExpr",
        "'++'"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $2.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![\r\n                *$1,\r\n                (\r\n                    SpanBuilder::end($2.span),\r\n                    Expr::NoneExpr\r\n                ).into()\r\n            ]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "PostfixExpr",
      "right": [
        "PostfixExpr",
        "'--'"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        SpanBuilder::merge($1.span, $2.span),\r\n        Expr::OperatorExpr(OperatorExpr {\r\n            operator: $2.value,\r\n            args: vec![\r\n                *$1,\r\n                (\r\n                    SpanBuilder::end($2.span),\r\n                    Expr::NoneExpr\r\n                ).into()\r\n            ]\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "PostfixExpr",
      "right": [
        "PrimaryExpr"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $1;"
      }
    },
    {
      "left": "PrimaryExpr",
      "right": [
        "Literal"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        $1.span,\r\n        Expr::LitExpr(LitExpr {\r\n            lit: $1.value\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "PrimaryExpr",
      "right": [
        "'ident'"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = Box::new((\r\n        $1.span,\r\n        Expr::IdentExpr(IdentExpr {\r\n            ident: $1.value\r\n        })\r\n    ).into());"
      }
    },
    {
      "left": "PrimaryExpr",
      "right": [
        "'('",
        "Expr",
        "')'"
      ],
      "reduction": {
        "ty": "Box<SourcedExpr>",
        "code": "$$ = $2;"
      }
    },
    {
      "left": "ArgList",
      "right": [
        "ArgList",
        "','",
        "AssignExpr"
      ],
      "reduction": {
        "ty": "Vec<SourcedExpr>",
        "code": "$1.push(*$3);\r\n    $$ = $1;"
      }
    },
    {
      "left": "ArgList",
      "right": [
        "AssignExpr"
      ],
      "reduction": {
        "ty": "Vec<SourcedExpr>",
        "code": "$$ = vec![*$1];"
      }
    },
    {
      "left": "Literal",
      "right": [
        "'string_literal'"
      ],
      "reduction": {
        "ty": "Sourced<Lit>",
        "code": "$$ = ($1.span, Lit::String($1.value)).into();"
      }
    },
    {
      "left": "Literal",
      "right": [
        "'int_literal'"
      ],
      "reduction": {
        "ty": "Sourced<Lit>",
        "code": "$$ = ($1.span, Lit::Integer($1.value.parse::<isize>().unwrap())).into();"
      }
    },
    {
      "left": "Literal",
      "right": [
        "'float_literal'"
      ],
      "reduction": {
        "ty": "Sourced<Lit>",
        "code": "$$ = ($1.span, Lit::Float($1.value.parse::<f64>().unwrap())).into();"
      }
    },
    {
      "left": "Literal",
      "right": [
        "'bool_literal'"
      ],
      "reduction": {
        "ty": "Sourced<Lit>",
        "code": "$$ = ($1.span, Lit::Boolean($1.value.parse::<bool>().unwrap())).into();"
      }
    },
    {
      "left": "VarDeclStmt",
      "right": [
        "'let'",
        "VarDeclList",
        "';'"
      ],
      "reduction": {
        "ty": "SourcedStmt",
        "code": "$$ = (\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Stmt::VarDeclStmt(VarDeclStmt {\r\n            decls: $2\r\n        })\r\n    ).into();"
      }
    },
    {
      "left": "VarDeclList",
      "right": [
        "VarDeclList",
        "','",
        "VarDecl"
      ],
      "reduction": {
        "ty": "Vec<Sourced<VarDecl>>",
        "code": "$1.push($3);\r\n    $$ = $1;"
      }
    },
    {
      "left": "VarDeclList",
      "right": [
        "VarDecl"
      ],
      "reduction": {
        "ty": "Vec<Sourced<VarDecl>>",
        "code": "$$ = vec![$1];"
      }
    },
    {
      "left": "VarDecl",
      "right": [
        "'ident'",
        "OptVarType",
        "OptVarInit"
      ],
      "reduction": {
        "ty": "Sourced<VarDecl>",
        "code": "$$ = match $2 {\r\n        Some(ty) => (\r\n            SpanBuilder::merge($1.span, ty.span),\r\n            VarDecl {\r\n                name: ($1.span, $1.value).into(),\r\n                ty: Some(ty),\r\n                init: $3\r\n            }\r\n        ).into(),\r\n        None => (\r\n            $1.span,\r\n            VarDecl {\r\n                name: ($1.span, $1.value).into(),\r\n                ty: None,\r\n                init: $3\r\n            }\r\n        ).into()\r\n    };"
      }
    },
    {
      "left": "OptVarType",
      "right": [
        "':'",
        "Type"
      ],
      "reduction": {
        "ty": "Option<Sourced<Type>>",
        "code": "$$ = Some($2);"
      }
    },
    {
      "left": "OptVarType",
      "right": [
        "Îµ"
      ],
      "reduction": {
        "ty": "Option<Sourced<Type>>",
        "code": "$$ = None;"
      }
    },
    {
      "left": "OptVarInit",
      "right": [
        "'='",
        "Expr"
      ],
      "reduction": {
        "ty": "Option<Box<SourcedExpr>>",
        "code": "$$ = Some($2);"
      }
    },
    {
      "left": "OptVarInit",
      "right": [
        "Îµ"
      ],
      "reduction": {
        "ty": "Option<Box<SourcedExpr>>",
        "code": "$$ = None;"
      }
    },
    {
      "left": "FuncDeclStmt",
      "right": [
        "FuncDecl",
        "BlockStmt"
      ],
      "reduction": {
        "ty": "SourcedStmt",
        "code": "$$ = (\r\n        $1.3,\r\n        Stmt::FuncDeclStmt(FuncDeclStmt {\r\n            name: $1.0,\r\n            params: $1.1,\r\n            ty: $1.2,\r\n            body: Some($2),\r\n            is_vararg: $1.4,\r\n        })\r\n    ).into();"
      }
    },
    {
      "left": "FuncDeclStmt",
      "right": [
        "FuncDecl",
        "';'"
      ],
      "reduction": {
        "ty": "SourcedStmt",
        "code": "$$ = (\r\n        $1.3,\r\n        Stmt::FuncDeclStmt(FuncDeclStmt {\r\n            name: $1.0,\r\n            params: $1.1,\r\n            ty: $1.2,\r\n            body: None,\r\n            is_vararg: $1.4,\r\n        })\r\n    ).into();"
      }
    },
    {
      "left": "FuncDecl",
      "right": [
        "FuncQual",
        "'fn'",
        "'ident'",
        "'('",
        "ParamList",
        "')'",
        "FuncReturn"
      ],
      "reduction": {
        "ty": "(Sourced<String>, Vec<Sourced<Param>>, Option<Sourced<Type>>, SourceSpan, bool)",
        "code": "let mut ty = None;\r\n    let mut span = $2.span;\r\n    if let Some(sp) = $1 {\r\n        span = SpanBuilder::merge(sp, span);\r\n    }\r\n    match $7 {\r\n        Some(typ) => {\r\n            span = SpanBuilder::merge(span, typ.span);\r\n            ty = Some(typ);\r\n        }\r\n        None => {\r\n            span = SpanBuilder::merge(span, $6.span);\r\n        }\r\n    };\r\n    $$ = (\r\n        ($3.span, $3.value).into(),\r\n        $5.0,\r\n        ty,\r\n        span,\r\n        $5.1\r\n    );"
      }
    },
    {
      "left": "FuncQual",
      "right": [
        "'extern'"
      ],
      "reduction": {
        "ty": "Option<SourceSpan>",
        "code": "$$ = Some($1.span);"
      }
    },
    {
      "left": "FuncQual",
      "right": [
        "Îµ"
      ],
      "reduction": {
        "ty": "Option<SourceSpan>",
        "code": "$$ = None;"
      }
    },
    {
      "left": "FuncReturn",
      "right": [
        "'->'",
        "Type"
      ],
      "reduction": {
        "ty": "Option<Sourced<Type>>",
        "code": "$$ = Some($2);"
      }
    },
    {
      "left": "FuncReturn",
      "right": [
        "Îµ"
      ],
      "reduction": {
        "ty": "Option<Sourced<Type>>",
        "code": "$$ = None;"
      }
    },
    {
      "left": "BlockStmt",
      "right": [
        "'{'",
        "StmtList",
        "'}'"
      ],
      "reduction": {
        "ty": "Sourced<BlockStmt>",
        "code": "$$ = (\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        BlockStmt {\r\n            stmts: $2\r\n        }\r\n    ).into();"
      }
    },
    {
      "left": "ParamList",
      "right": [
        "NonTermParamList"
      ],
      "reduction": {
        "ty": "(Vec<Sourced<Param>>, bool)",
        "code": "$$ = ($1, false);"
      }
    },
    {
      "left": "ParamList",
      "right": [
        "TermParamList"
      ],
      "reduction": {
        "ty": "(Vec<Sourced<Param>>, bool)",
        "code": "$$ = ($1, true);"
      }
    },
    {
      "left": "ParamList",
      "right": [
        "Îµ"
      ],
      "reduction": {
        "ty": "(Vec<Sourced<Param>>, bool)",
        "code": "$$ = (vec![], false);"
      }
    },
    {
      "left": "NonTermParamList",
      "right": [
        "Param",
        "NonTermParamListTail"
      ],
      "reduction": {
        "ty": "Vec<Sourced<Param>>",
        "code": "$2.push($1); $$ = $2;"
      }
    },
    {
      "left": "NonTermParamList",
      "right": [
        "Param"
      ],
      "reduction": {
        "ty": "Vec<Sourced<Param>>",
        "code": "$$ = vec![$1];"
      }
    },
    {
      "left": "NonTermParamListTail",
      "right": [
        "','",
        "Param",
        "NonTermParamListTail"
      ],
      "reduction": {
        "ty": "Vec<Sourced<Param>>",
        "code": "$3.push($2); $$ = $3;"
      }
    },
    {
      "left": "NonTermParamListTail",
      "right": [
        "Îµ"
      ],
      "reduction": {
        "ty": "Vec<Sourced<Param>>",
        "code": "$$ = vec![];"
      }
    },
    {
      "left": "TermParamList",
      "right": [
        "Param",
        "TermParamListTail",
        "','",
        "'...'"
      ],
      "reduction": {
        "ty": "Vec<Sourced<Param>>",
        "code": "$2.push($1); $$ = $2;"
      }
    },
    {
      "left": "TermParamList",
      "right": [
        "'...'"
      ],
      "reduction": {
        "ty": "Vec<Sourced<Param>>",
        "code": "$$ = vec![];"
      }
    },
    {
      "left": "TermParamListTail",
      "right": [
        "','",
        "Param",
        "TermParamListTail"
      ],
      "reduction": {
        "ty": "Vec<Sourced<Param>>",
        "code": "$3.push($2); $$ = $3;"
      }
    },
    {
      "left": "TermParamListTail",
      "right": [
        "Îµ"
      ],
      "reduction": {
        "ty": "Vec<Sourced<Param>>",
        "code": "$$ = vec![];"
      }
    },
    {
      "left": "Param",
      "right": [
        "'ident'",
        "':'",
        "Type"
      ],
      "reduction": {
        "ty": "Sourced<Param>",
        "code": "$$ = (\r\n        SpanBuilder::merge($1.span, $3.span),\r\n        Param {\r\n            name: ($1.span, $1.value).into(),\r\n            ty: $3\r\n        }\r\n    ).into();"
      }
    },
    {
      "left": "Type",
      "right": [
        "TypeRefList",
        "'ident'"
      ],
      "reduction": {
        "ty": "Sourced<Type>",
        "code": "$$ = match $1 {\r\n        Some((_count, span)) => (\r\n            SpanBuilder::merge(span, $2.span),\r\n            Type::StructType(StructType {\r\n                ident: $2.value\r\n            })\r\n        ).into(),\r\n        None => (\r\n            $2.span,\r\n            Type::StructType(StructType {\r\n                ident: $2.value\r\n            })\r\n        ).into()\r\n    };"
      }
    },
    {
      "left": "TypeRefList",
      "right": [
        "TypeRefList",
        "'&'"
      ],
      "reduction": {
        "ty": "Option<(usize, SourceSpan)>",
        "code": "$$ = match $1 {\r\n        Some((count, span)) => Some((\r\n            count + 1,\r\n            SpanBuilder::merge(span, $2.span)\r\n        )),\r\n        None => Some((1, $2.span))\r\n    };"
      }
    },
    {
      "left": "TypeRefList",
      "right": [
        "Îµ"
      ],
      "reduction": {
        "ty": "Option<(usize, SourceSpan)>",
        "code": "$$ = None;"
      }
    },
    {
      "left": "'unary_op'",
      "right": [
        "[&*+\\-~!]"
      ],
      "reduction": null
    },
    {
      "left": "'eq_op'",
      "right": [
        "(:?==|!=)"
      ],
      "reduction": null
    },
    {
      "left": "'rel_op'",
      "right": [
        "(:?<=|>=|<|>)"
      ],
      "reduction": null
    },
    {
      "left": "'shift_op'",
      "right": [
        "(:?>>|<<)"
      ],
      "reduction": null
    },
    {
      "left": "'add_op'",
      "right": [
        "[+\\-]"
      ],
      "reduction": null
    },
    {
      "left": "'mul_op'",
      "right": [
        "[*\\/%]"
      ],
      "reduction": null
    },
    {
      "left": "'int_literal'",
      "right": [
        "(?:[1-9][0-9]*|0)"
      ],
      "reduction": null
    },
    {
      "left": "'float_literal'",
      "right": [
        "[+\\-]?(?:[1-9][0-9]*|0)?(?:\\.[0-9]*[1-9]|\\.0)(?:[eE][+\\-]?(?:[1-9][0-9]*|0))?"
      ],
      "reduction": null
    },
    {
      "left": "'bool_literal'",
      "right": [
        "(?:true|false)"
      ],
      "reduction": null
    },
    {
      "left": "'string_literal'",
      "right": [
        "(?:\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*')"
      ],
      "reduction": null
    },
    {
      "left": "'ident'",
      "right": [
        "[A-Za-z_][A-Za-z0-9_]*"
      ],
      "reduction": null
    }
  ]
}
Program -> StmtList [Vec<SourcedStmt>] {{ $$ = $1; }} ;

StmtList -> StmtList Stmt [Vec<SourcedStmt>] {{ $1.push($2); $$ = $1; }} ;
StmtList -> [Vec<SourcedStmt>] {{ $$ = vec![]; }} ;

Stmt -> ReturnStmt | ExprStmt | VarDeclStmt | FuncDeclStmt
[SourcedStmt] {{
    $$ = $1;
}} ;
Stmt -> BlockStmt [SourcedStmt] {{
    $$ = (
        $1.span,
        Stmt::BlockStmt($1.value)
    ).into();
}} ;

ReturnStmt -> 'return' Expr ';' 
[SourcedStmt] {{
    $$ = (
        SpanBuilder::merge($1.span, $3.span),
        Stmt::ReturnStmt(ReturnStmt {
            expr: Some($2)
        })
    ).into(); 
}} ;
ReturnStmt -> 'return' ';' 
[SourcedStmt] {{
    $$ = (
        SpanBuilder::merge($1.span, $2.span),
        Stmt::ReturnStmt(ReturnStmt {
            expr: None
        })
    ).into();
}} ;

ExprStmt -> ';'
[SourcedStmt] {{
    $$ = (
        $1.span,
        Stmt::ExprStmt(ExprStmt {
            expr: Box::new(($1.span, Expr::NoneExpr).into())
        })
    ).into();
}} ;
ExprStmt -> Expr ';'
[SourcedStmt] {{
    $$ = (
        $1.span,
        Stmt::ExprStmt(ExprStmt {
            expr: $1
        })
    ).into();
}} ;

Expr -> Expr ',' AssignExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $2.value,
            args: vec![*$1, *$3]
        })
    ).into());
}} ;
Expr -> AssignExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

AssignExpr -> UnaryExpr '=' AssignExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $2.value,
            args: vec![*$1, *$3]
        })
    ).into());
}} ;
AssignExpr -> CondExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

CondExpr -> LogicOrExpr '?' Expr ':' CondExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $5.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: String::from("?:"),
            args: vec![*$1, *$3, *$5]
        })
    ).into());
}} ;
CondExpr -> LogicOrExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

LogicOrExpr -> LogicOrExpr '||' LogicAndExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $2.value,
            args: vec![*$1, *$3]
        })
    ).into());
}} ;
LogicOrExpr -> LogicAndExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

LogicAndExpr -> LogicAndExpr '&&' BitwiseOrExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $2.value,
            args: vec![*$1, *$3]
        })
    ).into());
}} ;
LogicAndExpr -> BitwiseOrExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

BitwiseOrExpr -> BitwiseOrExpr '|' BitwiseXorExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $2.value,
            args: vec![*$1, *$3]
        })
    ).into());
}} ;
BitwiseOrExpr -> BitwiseXorExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

BitwiseXorExpr -> BitwiseXorExpr '^' BitwiseAndExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $2.value,
            args: vec![*$1, *$3]
        })
    ).into());
}} ;
BitwiseXorExpr -> BitwiseAndExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

BitwiseAndExpr -> BitwiseAndExpr '&' EqExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $2.value,
            args: vec![*$1, *$3]
        })
    ).into());
}} ;
BitwiseAndExpr -> EqExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

EqExpr -> EqExpr 'eq_op' RelExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $2.value,
            args: vec![*$1, *$3]
        })
    ).into());
}} ;
EqExpr -> RelExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

RelExpr -> RelExpr 'rel_op' ShiftExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $2.value,
            args: vec![*$1, *$3]
        })
    ).into());
}} ;
RelExpr -> ShiftExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

ShiftExpr -> ShiftExpr 'shift_op' AddExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $2.value,
            args: vec![*$1, *$3]
        })
    ).into());
}} ;
ShiftExpr -> AddExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

AddExpr -> AddExpr '+' MulExpr | AddExpr '-' MulExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $2.value,
            args: vec![*$1, *$3]
        })
    ).into());
}} ;
AddExpr -> MulExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

MulExpr -> MulExpr '*' CastExpr | MulExpr '/' CastExpr | MulExpr '%' CastExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $2.value,
            args: vec![*$1, *$3]
        })
    ).into());
}} ;
MulExpr -> CastExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

CastExpr -> '(' Type ')' CastExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $4.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: String::from("()"),
            args: vec![*$4]
        })
    ).into());
}} ;
CastExpr -> UnaryExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

UnaryExpr -> '++' UnaryExpr |
             '--' UnaryExpr |
             'sizeof' UnaryExpr |
             '!' CastExpr |
             '~' CastExpr |
             '&' CastExpr |
             '*' CastExpr |
             '+' CastExpr |
             '-' CastExpr
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $2.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $1.value,
            args: vec![*$2]
        })
    ).into());
}} ;
UnaryExpr ->  PostfixExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

PostfixExpr -> PostfixExpr '[' Expr ']'
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $4.span),
        Expr::IndexExpr(IndexExpr {
            expr: $1,
            index: $3
        })
    ).into());
}} ;
PostfixExpr -> PostfixExpr '(' ')'
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::CallExpr(CallExpr {
            expr: $1,
            args: vec![]
        })
    ).into());
}} ;
PostfixExpr -> PostfixExpr '(' ArgList ')'
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $4.span),
        Expr::CallExpr(CallExpr {
            expr: $1,
            args: $3
        })
    ).into());
}} ;
PostfixExpr -> PostfixExpr '.' 'ident'
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $3.span),
        Expr::MemberExpr(MemberExpr {
            expr: $1,
            ident: $3.value
        })
    ).into());
}} ;
PostfixExpr -> PostfixExpr '++' | PostfixExpr '--'
[Box<SourcedExpr>] {{
    $$ = Box::new((
        SpanBuilder::merge($1.span, $2.span),
        Expr::OperatorExpr(OperatorExpr {
            operator: $2.value,
            args: vec![
                *$1,
                (
                    SpanBuilder::end($2.span),
                    Expr::NoneExpr
                ).into()
            ]
        })
    ).into());
}} ;
PostfixExpr -> PrimaryExpr
[Box<SourcedExpr>] {{
    $$ = $1;
}} ;

PrimaryExpr -> Literal
[Box<SourcedExpr>] {{
    $$ = Box::new((
        $1.span,
        Expr::LitExpr(LitExpr {
            lit: $1.value
        })
    ).into());
}} ;
PrimaryExpr -> 'ident'
[Box<SourcedExpr>] {{
    $$ = Box::new((
        $1.span,
        Expr::IdentExpr(IdentExpr {
            ident: $1.value
        })
    ).into());
}} ;
PrimaryExpr -> '(' Expr ')'
[Box<SourcedExpr>] {{
    $$ = $2;
}} ;

ArgList -> ArgList ',' AssignExpr
[Vec<SourcedExpr>] {{
    $1.push(*$3);
    $$ = $1;
}} ;
ArgList -> AssignExpr
[Vec<SourcedExpr>] {{
    $$ = vec![*$1];
}} ;

Literal -> 'string_literal'
[Sourced<Lit>] {{
    $$ = ($1.span, Lit::String($1.value)).into();
}} ;
Literal -> 'int_literal'
[Sourced<Lit>] {{
    $$ = ($1.span, Lit::Integer($1.value.parse::<isize>().unwrap())).into();
}} ;
Literal -> 'float_literal'
[Sourced<Lit>] {{
    $$ = ($1.span, Lit::Float($1.value.parse::<f64>().unwrap())).into();
}} ;
Literal -> 'bool_literal'
[Sourced<Lit>] {{
    $$ = ($1.span, Lit::Boolean($1.value.parse::<bool>().unwrap())).into();
}} ;

VarDeclStmt -> 'let' VarDeclList ';'
[SourcedStmt] {{
    $$ = (
        SpanBuilder::merge($1.span, $3.span),
        Stmt::VarDeclStmt(VarDeclStmt {
            decls: $2
        })
    ).into();
}} ;

VarDeclList -> VarDeclList ',' VarDecl
[Vec<Sourced<VarDecl>>] {{
    $1.push($3);
    $$ = $1;
}} ;

VarDeclList -> VarDecl
[Vec<Sourced<VarDecl>>] {{
    $$ = vec![$1];
}} ;

VarDecl -> 'ident' OptVarType OptVarInit
[Sourced<VarDecl>] {{
    $$ = match $2 {
        Some(ty) => (
            SpanBuilder::merge($1.span, ty.span),
            VarDecl {
                name: ($1.span, $1.value).into(),
                ty: Some(ty),
                init: $3
            }
        ).into(),
        None => (
            $1.span,
            VarDecl {
                name: ($1.span, $1.value).into(),
                ty: None,
                init: $3
            }
        ).into()
    };
}} ;

OptVarType -> ':' Type [Option<Sourced<Type>>] {{ $$ = Some($2); }} ;
OptVarType -> [Option<Sourced<Type>>] {{ $$ = None; }} ;

OptVarInit -> '=' Expr [Option<Box<SourcedExpr>>] {{ $$ = Some($2); }} ;
OptVarInit -> [Option<Box<SourcedExpr>>] {{ $$ = None; }} ;

FuncDeclStmt -> FuncDecl BlockStmt
[SourcedStmt] {{
    $$ = (
        $1.3,
        Stmt::FuncDeclStmt(FuncDeclStmt {
            name: $1.0,
            params: $1.1,
            ty: $1.2,
            body: Some($2),
            is_vararg: $1.4,
        })
    ).into();
}} ;
FuncDeclStmt -> FuncDecl ';'
[SourcedStmt] {{
    $$ = (
        $1.3,
        Stmt::FuncDeclStmt(FuncDeclStmt {
            name: $1.0,
            params: $1.1,
            ty: $1.2,
            body: None,
            is_vararg: $1.4,
        })
    ).into();
}} ;

FuncDecl -> FuncQual 'fn' 'ident' '(' ParamList ')' FuncReturn
[(Sourced<String>, Vec<Sourced<Param>>, Option<Sourced<Type>>, SourceSpan, bool)] {{
    let mut ty = None;
    let mut span = $2.span;
    if let Some(sp) = $1 {
        span = SpanBuilder::merge(sp, span);
    }
    match $7 {
        Some(typ) => {
            span = SpanBuilder::merge(span, typ.span);
            ty = Some(typ);
        }
        None => {
            span = SpanBuilder::merge(span, $6.span);
        }
    };
    $$ = (
        ($3.span, $3.value).into(),
        $5.0,
        ty,
        span,
        $5.1
    );
}} ;

FuncQual -> 'extern' [Option<SourceSpan>] {{ $$ = Some($1.span); }} ;
FuncQual -> [Option<SourceSpan>] {{ $$ = None; }} ;

FuncReturn -> '->' Type [Option<Sourced<Type>>] {{ $$ = Some($2); }} ;
FuncReturn ->  [Option<Sourced<Type>>] {{ $$ = None; }} ;

BlockStmt -> '{' StmtList '}'
[Sourced<BlockStmt>] {{
    $$ = (
        SpanBuilder::merge($1.span, $3.span),
        BlockStmt {
            stmts: $2
        }
    ).into();
}};

ParamList -> NonTermParamList [(Vec<Sourced<Param>>, bool)] {{ $$ = ($1, false); }} ;
ParamList -> TermParamList [(Vec<Sourced<Param>>, bool)] {{ $$ = ($1, true); }} ;
ParamList -> [(Vec<Sourced<Param>>, bool)] {{ $$ = (vec![], false); }} ;

NonTermParamList -> Param NonTermParamListTail [Vec<Sourced<Param>>] {{ $2.push($1); $$ = $2; }} ;
NonTermParamList -> Param [Vec<Sourced<Param>>] {{ $$ = vec![$1]; }} ;

NonTermParamListTail -> ',' Param NonTermParamListTail [Vec<Sourced<Param>>] {{ $3.push($2); $$ = $3; }} ;
NonTermParamListTail -> [Vec<Sourced<Param>>] {{ $$ = vec![]; }} ;

TermParamList -> Param TermParamListTail ',' '...' [Vec<Sourced<Param>>] {{ $2.push($1); $$ = $2; }} ;
TermParamList -> '...' [Vec<Sourced<Param>>] {{ $$ = vec![]; }} ;

TermParamListTail -> ',' Param TermParamListTail [Vec<Sourced<Param>>] {{ $3.push($2); $$ = $3; }} ;
TermParamListTail -> [Vec<Sourced<Param>>] {{ $$ = vec![]; }} ;

Param -> 'ident' ':' Type [Sourced<Param>] {{
    $$ = (
        SpanBuilder::merge($1.span, $3.span),
        Param {
            name: ($1.span, $1.value).into(),
            ty: $3
        }
    ).into();
}};

Type -> TypeRefList 'ident'
[Sourced<Type>] {{
    $$ = match $1 {
        Some((_count, span)) => (
            SpanBuilder::merge(span, $2.span),
            Type::StructType(StructType {
                ident: $2.value
            })
        ).into(),
        None => (
            $2.span,
            Type::StructType(StructType {
                ident: $2.value
            })
        ).into()
    };
}} ;

TypeRefList -> TypeRefList '&'
[Option<(usize, SourceSpan)>] {{
    $$ = match $1 {
        Some((count, span)) => Some((
            count + 1,
            SpanBuilder::merge(span, $2.span)
        )),
        None => Some((1, $2.span))
    };
}} ;
TypeRefList -> [Option<(usize, SourceSpan)>] {{
    $$ = None;
}} ;

'unary_op' -> /[&*+\-~!]/ ;
'eq_op' -> /(:?==|!=)/ ;
'rel_op' -> /(:?<=|>=|<|>)/ ;
'shift_op' -> /(:?>>|<<)/ ;
'add_op' -> /[+\-]/ ;
'mul_op' -> /[*\/%]/ ;

'int_literal' -> /(?:[1-9][0-9]*|0)/ ;
'float_literal' -> /[+\-]?(?:[1-9][0-9]*|0)?(?:\.[0-9]*[1-9]|\.0)(?:[eE][+\-]?(?:[1-9][0-9]*|0))?/ ;
'bool_literal' -> /(?:true|false)/ ;
'string_literal' -> /(?:"(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*')/ ;

'ident' -> /[A-Za-z_][A-Za-z0-9_]*/ ;
